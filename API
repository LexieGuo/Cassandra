package com.example.demo;

import java.util.*;


import com.datastax.oss.driver.api.core.CqlSession;
import com.datastax.oss.driver.api.core.cql.ResultSet;
import com.datastax.oss.driver.api.core.cql.Row;
import com.datastax.oss.driver.api.core.cql.SimpleStatement;
import com.datastax.oss.driver.api.core.metadata.Metadata;
import com.datastax.oss.driver.api.core.session.Session;
import com.datastax.oss.driver.api.querybuilder.SchemaBuilder;
import com.datastax.oss.driver.api.querybuilder.schema.Drop;

import org.apache.catalina.Cluster;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.data.cassandra.core.mapping.PrimaryKey;
import org.springframework.data.cassandra.core.mapping.Table;

public class Application{
	private Cluster cluster;
	private Session session;
	@Value("${spring.data.cassandra.keyspace-name}")
	private String keyspaceName;
	
	@Value("${spring.data.cassandra.contact-points}")
	private String host;
	
	@Value("${spring.data.cassandra.port}")
	private int port;
   
	@Value("${spring.data.cassandra.cluster-name}")
	private String clusterName;
   
	@Value("${spring.data.cassandra.username:#{null}}")
	private String userName;
   
	@Value("${spring.data.cassandra.password:#{null}}")
	private String password;
   
	public Cluster cluster() {
		return Cluster.builder()
				.addContactPoints(host.split(","))
				.withPort(port)
				.withClusterName(clusterName)
				.withCredentials(userName, password)
				.withoutJMXReporting()
				.build();
	}
	
	public Session session(@Autowired Cluster cluster) {
		Metadata metadata = cluster.getMetadata();
		Session session = cluster.connect();
		if(Objects.isNull(metadata.getKeyspace(keyspaceName))) {
			setupKeyspace(session, keyspaceName);
		}
		return session;
	}
	
	// initialize the songs 
	public class Songs {
		@PrimaryKey
		private @NonNull String id;
		private @NonNull String title;
		private @NonNull String album;
		private @NonNull String artist;
	}
	
	// Connect to the cluster
	public void connect(String[] nodes, int port) {
		cluster = Cluster.builder()
				.addContactPoint(nodes)
				.withPort(port)
				.withCredentials(userName, password)
				.build();
		Metadata metadata = cluster.getMetadata();
		System.out.printf("Connected to cluster: %s\n",
				metadata.getClusterName());
		session = cluster.connect();
	}
	

	// Creates the simplex KEYSPACE and two TABLES
	public void createSchema() {
		session.execute("CREATE KEYSPACE IF NOT EXISTS simplex WITH replication " +
				"= {'class':'SimpleStrategy', 'replication_factor':2};");
		session.execute("CREATE TABLE IF NOT EXISTS simplex.songs (" + 
				"id uuid PRIMARY KEY," +
				"title text," + 
				"album text," +
				"artist text" +
				");");
		session.execute("CREATE TABLE IF NOT EXITST simplex.playlists (" +
				"id uuid," +
				"title text," +
				"album text" +
				"artist text," +
				"sont_id uuid," +
				"PRIMARY KEY(id, title, album, artist)" +
				");");
		System.out.println("Simplex keyspace and schema created.");
	}
	
	// write data into schema
	public void updateData() {
		session.execute("INSERT INTO simplex.songs (id, title, album, artist" + 
				"VALUES (" +
				"1," +
				"'La Petite Tonkinoise'," +
				"'Bye Bye Blackbird''," +
				"'Joséphine Baker'," +
				");");
		session.execute("INSERT INTO simplex.playlists (id, song_id, title, album, artist) " +
				"VALUES (" +
				"2," +
				"1," +
				"'La Petite Tonkinoise'," +
				"'Bye Bye Blackbird'," +
				"'Joséphine Baker'" +
				");");
		System.out.println("Data loaded.");
	}
	
	// print out by rows
	public void querySchema() {
		ResultSet results = session.execute("SELECT * FROM simplex.playlists" +
						    "WHERE id = 2;");
		System.out.println(String.format("%-30st%-20st%-20sn%s", "title", "album", "artist",
				"-------------+------------------+---------------"));
		for(Row row : results) {
			System.out.println(String.format("%-30st%-20st%-20s",
					row.getString("title"),
					row.getString("album"),
					row.getString("artist")));
		}
		System.out.println();
	}
	
	// update table and print
	public void updateSchema() {
		session.execute("UPDATE simplex.songs" +
				"SET tags = tags + { 'entre-deux-guerres' } " +
				"WHERE id = 1;");
		ResultSet results = session.execute("SELECT * FROM simplex." +
						    "WHERE id = 1;");
		System.out.println(String.format("%-30st%-20st%-20s%-30sn%s",
						"title", "album", "artist", "tags",
						"--------------------------+-----------------+-----------------+-------"));
		for(Row row : results) {
			System.out.println(String.format("%-30st%-20st%-20s",
							row.getString("title"),
							row.getString("album"), 
							row.getString("artist")));
		}
	}
	
	// Drop a schema
	public void dropSchema(String keyspace) {
		getSession().execute("DROP KEYSPACE" + keyspace);
		System.out.println("Finished dropping " + keyspace + " keyspace.");
	}
	
	// get a session
	public Session getSession() {
		return this.session;
	}
	
	// set a Session
	void setSession(Session session) {
		this.session = session;
	}
	
	//get a cluster
	public Cluster getCluster() {
		return cluster;
	}

	//set a cluster
	public void setCluster(Cluster cluster) {
		this.cluster = cluster;
	}
	
	// close session and its cluster
	public void close() {
		session.close();
		session.getCluster().close();
	}
	
	// main function
	public static void main(String[] args) {
		SpringApplication.run(Application.class, args);
	}

}

