package com.example.demo;

import java.util.*;


import com.datastax.oss.driver.api.core.CqlSession;
import com.datastax.oss.driver.api.core.cql.ResultSet;
import com.datastax.oss.driver.api.core.cql.Row;
import com.datastax.oss.driver.api.core.cql.SimpleStatement;
import com.datastax.oss.driver.api.core.metadata.Metadata;
import com.datastax.oss.driver.api.core.session.Session;
import com.datastax.oss.driver.api.querybuilder.SchemaBuilder;
import com.datastax.oss.driver.api.querybuilder.schema.Drop;

import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NonNull;
import lombok.Setter;

import org.apache.catalina.Cluster;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.data.cassandra.core.mapping.PrimaryKey;
import org.springframework.data.cassandra.core.mapping.Table;

public class Application{
	private Cluster cluster;
	private Session session;
   @Value("${spring.data.cassandra.keyspace-name}")
    private String keyspaceName;
   
   @Value("${spring.data.cassandra.contact-points}")
   private String host;
   
   @Value("${spring.data.cassandra.port}")
   private int port;
   
   @Value("${spring.data.cassandra.cluster-name}")
   private String clusterName;
   
   @Value("${spring.data.cassandra.username:#{null}}")
   private String userName;
   
   @Value("${spring.data.cassandra.password:#{null}}")
   private String password;
   
	public Cluster cluster() {
		return Cluster.builder()
				.addContactPoints(host.split(","))
				.withPort(port)
				.withClusterName(clusterName)
				.withCredentials("userName", "password")
				.withoutJMXReporting()
				.build();
	}
	
	public Session session(@Autowired Cluster cluster) {
		Metadata metadata = cluster.getMetadata();
		Session session = cluster.connect();
		if(Objects.isNull(metadata.getKeyspace(keyspaceName))) {
			setupKeyspace(session, keyspaceName);
		}
		return session;
	}
	
	@AllArgsConstructor
	@Getter  @Setter
	@Table
	public class Songs {
		@PrimaryKey
		private @NonNull String id;
		private @NonNull String title;
		private @NonNull String album;
		private @NonNull String artist;
	}
	
	public void connect(String node) {
		Cluster cluster = Cluster.builder()
						.addContactPoint(node)
						.withCredentials(userName, password)
						.build();
		Metadata metadata = cluster.getMetadata();
		System.out.printf("Connected to Cluster: %s\n",
						 metadata.getClusterName());
		session = cluster.connect();
	}

	
	// Connect cluster
	public void connect(String[] nodes, int port) {
		cluster = Cluster.builder()
				.addContactPoint(nodes)
				.withPort(port)
				.withCredentials("username", "test")
				.build();
		Metadata metadata = cluster.getMetadata();
		System.out.printf("Connected to cluster: %s\n",
							metadata.getClusterName());
		session = cluster.connect();
	}
	


	// Creates the simplex KEYSPACE and two TABLES
	public void createSchema() {
		session.execute("CREATE KEYSPACE IF NOT EXISTS simplex WITH replication " +
						"= {'class':'SimpleStrategy', 'replication_factor':2};");
		session.execute("CREATE TABLE IF NOT EXISTS simplex.songs (" + 
						"id uuid PRIMARY KEY," +
						"title text," + 
						"album text," +
						"artist text" +
						");");
		session.execute("CREATE TABLE IF NOT EXITST simplex.playlists (" +
						"id uuid," +
						"title text," +
						"album text" +
						"artist text," +
						"sont_id uuid," +
						"PRIMARY KEY(id, title, album, artist)" +
						");");
		System.out.println("Simplex keyspace and schema created.");
	}
	
	// update data into schema
	public void updateData() {
		session.execute("INSERT INTO simplex.songs (id, title, album, artist" + 
						"VALUES (" +
						"756716f7-2e54-4715-9f00-91dcbea6cf50," +
						"'La Petite Tonkinoise'," +
						"'Bye Bye Blackbird''," +
						"'Joséphine Baker'," +
						");");
		session.execute("INSERT INTO simplex.playlists (id, song_id, title, album, artist) " +
						"VALUES (" +
						"2cc9ccb7-6221-4ccb-8387-f22b6a1b354d," +
						"756716f7-2e54-4715-9f00-91dcbea6cf50," +
						"'La Petite Tonkinoise'," +
						"'Bye Bye Blackbird'," +
						"'Joséphine Baker'" +
						");");
		System.out.println("Data loaded.");
	}
	
	public void querySchema() {
		ResultSet results = session.execute("SELECT * FROM simplex.playlists" +
											"WHERE id = 2cc9ccb7-6221-4ccb-8387-f22b6a1b354d;");
		System.out.println(String.format("%-30st%-20st%-20sn%s", "title", "album", "artist",
										"-------------+------------------+---------------"));
		for(Row row : results) {
			System.out.println(String.format("%-30st%-20st%-20s",
							row.getString("title"),
							row.getString("album"),
							row.getString("artist")));
		}
		System.out.println();
	}
	
	// update table
	public void updateSchema() {
		session.execute("UPDATE simplex.songs" +
						"SET tags = tags + { 'entre-deux-guerres' } " +
						"WHERE id = 756716f7-2e54-4715-9f00-91dcbea6cf50;");
		ResultSet results = session.execute("SELECT * FROM simplex." +
						"WHERE id = 756716f7-2e54-4715-9f00-91dcbea6cf50;");
		System.out.println(String.format("%-30st%-20st%-20s%-30sn%s",
							"title", "album", "artist", "tags",
					"--------------------------+-----------------+-----------------+-------"));
		for(Row row : results) {
			System.out.println(String.format("%-30st%-20st%-20s",
							row.getString("title"),
							row.getString("album"), 
							row.getString("artist")));
		}
	}
	
	// Drop a schema
	public void dropSchema(String keyspace) {
		getSession().execute("DROP KEYSPACE" + keyspace);
		System.out.println("Finished dropping " + keyspace + " keyspace.");
	}
	
	// getSession
	public Session getSession() {
		return this.session;
	}
	
	// set Session
	void setSession(Session session) {
		this.session = session;
	}
	
	// close session and its cluster
	public void close() {
		session.close();
		session.getCluster().close();
	}

	public static void main(String[] args) {
		SpringApplication.run(Application.class, args);
	}

	public Cluster getCluster() {
		return cluster;
	}

	public void setCluster(Cluster cluster) {
		this.cluster = cluster;
	}

}



//SAMPLE CODE
public class EmployeeController
{

@GetMapping("/employees")
 public List<Employee> getEmployees()
 {
  Iterable<Employee> result = employeeRepository.findAll();
  List<Employee> employeesList = new ArrayList<Employee>();
  result.forEach(employeesList::add);
  return employeesList;
 }
@GetMapping("/employee/{id}")
 public Optional<Employee> getEmployee(@PathVariable String id)
 {
  Optional<Employee> emp = employeeRepository.findById(id);
  return emp;
 }
@PutMapping("/employee/{id}")
 public Optional<Employee> updateEmployee(@RequestBody Employee newEmployee, @PathVariable String id)
 {
  Optional<Employee> optionalEmp = employeeRepository.findById(id);
  if (optionalEmp.isPresent()) {
   Employee emp = optionalEmp.get();
   emp.setFirstName(newEmployee.getFirstName());
   emp.setLastName(newEmployee.getLastName());
   emp.setEmail(newEmployee.getEmail());
   employeeRepository.save(emp);
  }
  return optionalEmp;
 }
@DeleteMapping(value = "/employee/{id}", produces = "application/json; charset=utf-8")
 public String deleteEmployee(@PathVariable String id) {
  Boolean result = employeeRepository.existsById(id);
  employeeRepository.deleteById(id);
  return "{ \"success\" : "+ (result ? "true" : "false") +" }";
 }
@PostMapping("/employee")
 public Employee addEmployee(@RequestBody Employee newEmployee)
 {
  String id = String.valueOf(new Random().nextInt());
  Employee emp = new Employee(id, newEmployee.getFirstName(), newEmployee.getLastName(), newEmployee.getEmail());
  employeeRepository.save(emp);
  return emp;
 }
}
